{"mappings":"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","sources":["script.js"],"sourcesContent":["'use strict';\n\n// prettier-ignore\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\nlet mapEvent;\n\nclass App {\n  #map;\n  #workouts = [];\n  constructor() {\n    this._getPosition();\n    this._getLocalStorage();\n    form.addEventListener('submit', this._newWorkout.bind(this));\n    inputType.addEventListener('change', this._toggleElevationFields);\n    containerWorkouts.addEventListener('click', this._panWorkout.bind(this));\n  }\n  _getPosition() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        this._loadMap.bind(this),\n        function () {\n          alert(`Please share your location in order to use the app`);\n        }\n      );\n    }\n  }\n  _loadMap(position) {\n    const { latitude } = position.coords;\n    const { longitude } = position.coords;\n    // console.log(`https://www.google.pt/maps/@${latitude},${longitude}`);\n\n    const coords = [latitude, longitude];\n    this.#map = L.map('map').setView(coords, 13);\n    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {\n      attribution:\n        '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(this.#map);\n    this.#workouts.forEach(e => this._renderMapMarker(e));\n    /////////////Map Click show form////////////////////\n    this.#map.on('click', function (mapE) {\n      mapEvent = mapE;\n      //   console.log(mapE);\n      form.classList.remove('hidden');\n      inputDistance.focus();\n    });\n    //\n  }\n  _toggleElevationFields() {\n    {\n      inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n      inputElevation\n        .closest('.form__row')\n        .classList.toggle('form__row--hidden');\n    }\n  }\n  _newWorkout(e) {\n    e.preventDefault();\n    ///////////helper function\n    const validInputs = (...inputs) =>\n      inputs.every(inp => Number.isFinite(inp));\n    const allPositive = (...inputs) => inputs.every(inp => inp > 0);\n    /////variable///////\n    let workout;\n    const distance = +inputDistance.value;\n    const duration = +inputDuration.value;\n    const { lat, lng } = mapEvent.latlng;\n    const coords = [lat, lng];\n    //////////////taking input from form/////\n    if (inputType.value === 'running') {\n      const cadence = +inputCadence.value;\n      if (\n        // !Number.isFinite(distance) ||\n        // !Number.isFinite(duration) ||\n        // !Number.isFinite(cadence)\n        !validInputs(distance, duration, cadence) ||\n        !allPositive(distance, duration, cadence)\n      ) {\n        return alert('Please enter a valid input');\n      }\n      workout = new Running(distance, duration, coords, cadence);\n    }\n    if (inputType.value === 'cycling') {\n      const elevation = +inputElevation.value;\n      if (\n        !validInputs(distance, duration, elevation) ||\n        !allPositive(distance, duration)\n      ) {\n        return alert('Please enter a valid input');\n      } else {\n        workout = new Cycling(distance, duration, coords, elevation);\n      }\n    }\n    ////pushing new workout to workoutsarray//////////\n    this.#workouts.push(workout);\n    // console.log(this.#workouts);\n    this._renderMapMarker(workout);\n    this._renderWorkouts(workout);\n    this._setLocalStorage(workout);\n  }\n\n  _renderMapMarker(workout) {\n    L.marker(workout.coords)\n      .addTo(this.#map)\n      .bindPopup(\n        L.popup({\n          maxWidth: 250,\n          minWidth: 100,\n          autoClose: false,\n          closeOnClick: false,\n          className: `${inputType.value}-popup`,\n        })\n      )\n      .setPopupContent(\n        `${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'} ${workout.description}`\n      )\n      .openPopup();\n    form.classList.add('hidden');\n    form.reset();\n  }\n  _renderWorkouts(workout) {\n    let html = `\n    <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n    <h2 class=\"workout__title\">${workout.description}</h2>\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">${\n          workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'\n        }</span>\n        <span class=\"workout__value\">${workout.distance}</span>\n        <span class=\"workout__unit\">km</span>\n      </div>\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">‚è±</span>\n        <span class=\"workout__value\">${workout.duration}</span>\n        <span class=\"workout__unit\">min</span>\n      </div>\n  `;\n\n    if (workout.type === 'running')\n      html += `\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">‚ö°Ô∏è</span>\n        <span class=\"workout__value\">${workout.pace}</span>\n        <span class=\"workout__unit\">min/km</span>\n      </div>\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">ü¶∂üèº</span>\n        <span class=\"workout__value\">${workout.cadence}</span>\n        <span class=\"workout__unit\">spm</span>\n      </div>\n    </li>\n    `;\n\n    if (workout.type === 'cycling')\n      html += `\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">‚ö°Ô∏è</span>\n        <span class=\"workout__value\">${workout.speed}</span>\n        <span class=\"workout__unit\">km/h</span>\n      </div>\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">‚õ∞</span>\n        <span class=\"workout__value\">${workout.elevationGain}</span>\n        <span class=\"workout__unit\">m</span>\n      </div>\n    </li>\n    `;\n    form.insertAdjacentHTML('afterend', html);\n  }\n  _panWorkout(e) {\n    if (!this.#map) return;\n    const workoutEl = e.target.closest('.workout');\n\n    if (!workoutEl) return;\n\n    const workout = this.#workouts.find(\n      work => work.id === workoutEl.dataset.id\n    );\n\n    this.#map.setView(workout.coords, 13, {\n      animate: true,\n      pan: {\n        duration: 1,\n      },\n    });\n  }\n  _setLocalStorage(workout) {\n    localStorage.setItem('workouts', JSON.stringify(this.#workouts));\n  }\n  _getLocalStorage() {\n    const data = JSON.parse(localStorage.getItem('workouts'));\n    if (!data) return;\n    this.#workouts = data;\n    console.log(data);\n    this.#workouts.forEach(cur => this._renderWorkouts(cur));\n  }\n  resetLocalStorage() {\n    localStorage.removeItem('workouts');\n    location.reload();\n  }\n}\n\n/////////////////////////////////////\nconst app = new App();\n\nclass Workout {\n  date = new Date();\n  id = (Date.now() + '').slice(-10);\n  constructor(distance, duration, coords) {\n    this.distance = distance;\n    this.duration = duration;\n    this.coords = coords;\n  }\n  _setDescription() {\n    // prettier-ignore\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\n      months[this.date.getMonth()]\n    } ${this.date.getDate()}`;\n  }\n}\nclass Running extends Workout {\n  type = 'running';\n  constructor(distance, duration, coords, cadence) {\n    super(distance, duration, coords);\n    this.cadence = cadence;\n    this.getPace();\n    this._setDescription();\n  }\n  getPace() {\n    this.pace = this.distance / this.duration;\n  }\n}\nclass Cycling extends Workout {\n  type = 'cycling';\n  constructor(distance, duration, coords, elevationGain) {\n    super(distance, duration, coords);\n    this.elevationGain = elevationGain;\n    this.getSpeed();\n    this._setDescription();\n  }\n  getSpeed() {\n    this.Speed = this.distance / this.duration;\n  }\n}\n"],"names":["months","form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","mapEvent","App","map","workouts","this","_getPosition","_getLocalStorage","addEventListener","_newWorkout","bind","_toggleElevationFields","_panWorkout","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","coords","longitude","L","setView","tileLayer","attribution","addTo","forEach","e","_renderMapMarker","on","mapE","classList","remove","focus","closest","toggle","preventDefault","validInputs","inputs","every","inp","Number","isFinite","allPositive","workout","distance","value","duration","lat","lng","latlng","cadence","Running","elevation","Cycling","push","_renderWorkouts","_setLocalStorage","marker","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","type","description","openPopup","add","reset","html","id","pace","speed","elevationGain","insertAdjacentHTML","workoutEl","target","find","work","dataset","animate","pan","localStorage","setItem","JSON","stringify","data","parse","getItem","console","log","cur","resetLocalStorage","removeItem","location","reload","app","Workout","date","Date","now","slice","_setDescription","toUpperCase","getMonth","getDate","super","getPace","getSpeed","Speed"],"version":3,"file":"index.fb5e3c7c.js.map"}