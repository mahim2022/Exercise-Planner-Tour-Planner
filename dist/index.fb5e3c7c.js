"use strict";const months=["January","February","March","April","May","June","July","August","September","October","November","December"],form=document.querySelector(".form"),containerWorkouts=document.querySelector(".workouts"),inputType=document.querySelector(".form__input--type"),inputDistance=document.querySelector(".form__input--distance"),inputDuration=document.querySelector(".form__input--duration"),inputCadence=document.querySelector(".form__input--cadence"),inputElevation=document.querySelector(".form__input--elevation");let mapEvent;class App{#t;#e=[];constructor(){this._getPosition(),this._getLocalStorage(),form.addEventListener("submit",this._newWorkout.bind(this)),inputType.addEventListener("change",this._toggleElevationFields),containerWorkouts.addEventListener("click",this._panWorkout.bind(this))}_getPosition(){navigator.geolocation&&navigator.geolocation.getCurrentPosition(this._loadMap.bind(this),(function(){alert("Please share your location in order to use the app")}))}_loadMap(t){const{latitude:e}=t.coords,{longitude:n}=t.coords,o=[e,n];this.#t=L.map("map").setView(o,13),L.tileLayer("http://{s}.tile.osm.org/{z}/{x}/{y}.png",{attribution:'&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'}).addTo(this.#t),this.#e.forEach((t=>this._renderMapMarker(t))),this.#t.on("click",(function(t){mapEvent=t,form.classList.remove("hidden"),inputDistance.focus()}))}_toggleElevationFields(){inputCadence.closest(".form__row").classList.toggle("form__row--hidden"),inputElevation.closest(".form__row").classList.toggle("form__row--hidden")}_newWorkout(t){t.preventDefault();const e=(...t)=>t.every((t=>Number.isFinite(t))),n=(...t)=>t.every((t=>t>0));let o;const s=+inputDistance.value,a=+inputDuration.value,{lat:i,lng:r}=mapEvent.latlng,u=[i,r];if("running"===inputType.value){const t=+inputCadence.value;if(!e(s,a,t)||!n(s,a,t))return alert("Please enter a valid input");o=new Running(s,a,u,t)}if("cycling"===inputType.value){const t=+inputElevation.value;if(!e(s,a,t)||!n(s,a))return alert("Please enter a valid input");o=new Cycling(s,a,u,t)}this.#e.push(o),this._renderMapMarker(o),this._renderWorkouts(o),this._setLocalStorage(o)}_renderMapMarker(t){L.marker(t.coords).addTo(this.#t).bindPopup(L.popup({maxWidth:250,minWidth:100,autoClose:!1,closeOnClick:!1,className:`${inputType.value}-popup`})).setPopupContent(`${"running"===t.type?"üèÉ‚Äç‚ôÇÔ∏è":"üö¥‚Äç‚ôÄÔ∏è"} ${t.description}`).openPopup(),form.classList.add("hidden"),form.reset()}_renderWorkouts(t){let e=`\n    <li class="workout workout--${t.type}" data-id="${t.id}">\n    <h2 class="workout__title">${t.description}</h2>\n      <div class="workout__details">\n        <span class="workout__icon">${"running"===t.type?"üèÉ‚Äç‚ôÇÔ∏è":"üö¥‚Äç‚ôÄÔ∏è"}</span>\n        <span class="workout__value">${t.distance}</span>\n        <span class="workout__unit">km</span>\n      </div>\n      <div class="workout__details">\n        <span class="workout__icon">‚è±</span>\n        <span class="workout__value">${t.duration}</span>\n        <span class="workout__unit">min</span>\n      </div>\n  `;"running"===t.type&&(e+=`\n      <div class="workout__details">\n        <span class="workout__icon">‚ö°Ô∏è</span>\n        <span class="workout__value">${t.pace}</span>\n        <span class="workout__unit">min/km</span>\n      </div>\n      <div class="workout__details">\n        <span class="workout__icon">ü¶∂üèº</span>\n        <span class="workout__value">${t.cadence}</span>\n        <span class="workout__unit">spm</span>\n      </div>\n    </li>\n    `),"cycling"===t.type&&(e+=`\n      <div class="workout__details">\n        <span class="workout__icon">‚ö°Ô∏è</span>\n        <span class="workout__value">${t.speed}</span>\n        <span class="workout__unit">km/h</span>\n      </div>\n      <div class="workout__details">\n        <span class="workout__icon">‚õ∞</span>\n        <span class="workout__value">${t.elevationGain}</span>\n        <span class="workout__unit">m</span>\n      </div>\n    </li>\n    `),form.insertAdjacentHTML("afterend",e)}_panWorkout(t){if(!this.#t)return;const e=t.target.closest(".workout");if(!e)return;const n=this.#e.find((t=>t.id===e.dataset.id));this.#t.setView(n.coords,13,{animate:!0,pan:{duration:1}})}_setLocalStorage(t){localStorage.setItem("workouts",JSON.stringify(this.#e))}_getLocalStorage(){const t=JSON.parse(localStorage.getItem("workouts"));t&&(this.#e=t,console.log(t),this.#e.forEach((t=>this._renderWorkouts(t))))}resetLocalStorage(){localStorage.removeItem("workouts"),location.reload()}}const app=new App;class Workout{date=new Date;id=(Date.now()+"").slice(-10);constructor(t,e,n){this.distance=t,this.duration=e,this.coords=n}_setDescription(){this.description=`${this.type[0].toUpperCase()}${this.type.slice(1)} on ${["January","February","March","April","May","June","July","August","September","October","November","December"][this.date.getMonth()]} ${this.date.getDate()}`}}class Running extends Workout{type="running";constructor(t,e,n,o){super(t,e,n),this.cadence=o,this.getPace(),this._setDescription()}getPace(){this.pace=this.distance/this.duration}}class Cycling extends Workout{type="cycling";constructor(t,e,n,o){super(t,e,n),this.elevationGain=o,this.getSpeed(),this._setDescription()}getSpeed(){this.Speed=this.distance/this.duration}}
//# sourceMappingURL=index.fb5e3c7c.js.map
